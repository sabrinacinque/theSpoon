import { Component, OnInit, ChangeDetectorRef, HostListener } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import { RestaurantService } from '../../services/restaurant';
import { PhotoService } from '../../services/photo.service';
import { UploadService } from '../../services/upload-service';
import { IRestaurant } from '../../models/i-restaurant';
import { IPhoto } from '../../models/i-photo';
import { forkJoin, of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

@Component({
  selector: 'app-homepage',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule
  ],
  templateUrl: './homepage.html',
  styleUrls: ['./homepage.css']
})
export class HomepageComponent implements OnInit {

  // Data
  restaurants: IRestaurant[] = [];
  filteredRestaurants: IRestaurant[] = [];
  restaurantPhotos: { [key: number]: string } = {}; // Cache foto principale per ogni ristorante
  photoLoadingStates: { [key: number]: boolean } = {}; // Stato loading per ogni foto

  // States
  loading = false;
  error: string | null = null;

  // Search & Filters
  searchFilters = {
    city: '',
    cuisine: ''
  };

  // ‚úÖ AUTOCOMPLETE PROPRIET√Ä
  availableCities: string[] = [];
  filteredCities: string[] = [];
  showCityDropdown = false;
  selectedCityIndex = -1;

  // Categories
  categories = [
    { name: 'Pizza', icon: 'üçï' },
    { name: 'Cinese', icon: 'ü•¢' },
    { name: 'Italiana', icon: 'üçù' },
    { name: 'Pub&Steakhouse', icon: 'ü•©' },
    { name: 'Vegetariana', icon: 'ü•ó' }
  ];

  // Quick Filters
  quickFilters = [
    { name: 'Tutti', active: true },
    { name: 'Aperti', active: false },
    { name: 'Migliori Recensioni', active: false },
    { name: 'Nuovi', active: false },
    { name: 'Premium', active: false }
  ];

  constructor(
    private restaurantService: RestaurantService,
    private photoService: PhotoService,
    private uploadService: UploadService,
    private router: Router,
    private cdr: ChangeDetectorRef,
    private http: HttpClient
  ) {}

  ngOnInit() {
    console.log('üè† Homepage inizializzata');
    this.loadItalianCities();
    this.loadRestaurants();
    this.initAnimations();
  }

  // ‚úÖ CARICA CITT√Ä ITALIANE DA JSON
  private loadItalianCities() {
    console.log('üìç Caricamento citt√† italiane...');

    this.http.get<string[]>('assets/data/italian-cities.json').subscribe({
      next: (cities) => {
        console.log('‚úÖ Citt√† caricate:', cities.length);
        this.availableCities = cities.sort();
        this.filteredCities = [];
      },
      error: (err) => {
        console.error('‚ùå Errore caricamento citt√†:', err);
        // Fallback con citt√† principali
        this.availableCities = [
          'Milano', 'Roma', 'Napoli', 'Torino', 'Palermo', 'Genova', 'Bologna', 'Firenze',
          'Bari', 'Catania', 'Venezia', 'Verona', 'Messina', 'Padova', 'Trieste', 'Taranto',
          'Brescia', 'Parma', 'Reggio Emilia', 'Modena', 'Prato', 'Cagliari', 'Livorno',
          'Perugia', 'Ravenna', 'Rimini', 'Salerno', 'Ferrara', 'Sassari', 'Monza',
          'Bergamo', 'Trento', 'Forl√¨', 'Vicenza', 'Terni', 'Bolzano', 'Novara',
          'Piacenza', 'Ancona', 'Andria', 'Arezzo', 'Udine', 'Cesena', 'Lecce',
          'Pesaro', 'Barletta', 'Alessandria', 'La Spezia', 'Pistoia', 'Caserta'
        ].sort();
        this.filteredCities = [];
      }
    });
  }

  // ‚úÖ AUTOCOMPLETE METODI
  onCityInput(event: Event) {
    const input = event.target as HTMLInputElement;
    const value = input.value.toLowerCase().trim();

    console.log('üîç Ricerca citt√†:', value);

    if (value.length === 0) {
      this.filteredCities = [];
      this.showCityDropdown = false;
      this.selectedCityIndex = -1;
      return;
    }

    // Filtra citt√† che contengono la stringa digitata
    this.filteredCities = this.availableCities
      .filter(city => city.toLowerCase().includes(value))
      .slice(0, 10); // Limita a 10 risultati

    this.showCityDropdown = this.filteredCities.length > 0;
    this.selectedCityIndex = -1;

    console.log('üìã Citt√† filtrate:', this.filteredCities.length);
  }

  onCityFocus() {
    console.log('üëÅÔ∏è Focus su input citt√†');
    if (this.searchFilters.city.length > 0) {
      this.onCityInput({ target: { value: this.searchFilters.city } } as any);
    }
  }

  onCityBlur() {
    // Ritarda la chiusura per permettere il click sui risultati
    setTimeout(() => {
      console.log('üò¥ Blur input citt√†');
      this.showCityDropdown = false;
      this.selectedCityIndex = -1;
    }, 200);
  }

  selectCity(city: string) {
    console.log('üéØ Citt√† selezionata:', city);
    this.searchFilters.city = city;
    this.showCityDropdown = false;
    this.selectedCityIndex = -1;
    this.filteredCities = [];
  }

  // ‚úÖ NAVIGAZIONE TASTIERA
  @HostListener('keydown', ['$event'])
  handleKeyboardNavigation(event: KeyboardEvent) {
    if (!this.showCityDropdown || this.filteredCities.length === 0) {
      return;
    }

    switch (event.key) {
      case 'ArrowDown':
        event.preventDefault();
        this.selectedCityIndex = Math.min(
          this.selectedCityIndex + 1,
          this.filteredCities.length - 1
        );
        break;

      case 'ArrowUp':
        event.preventDefault();
        this.selectedCityIndex = Math.max(this.selectedCityIndex - 1, -1);
        break;

      case 'Enter':
        event.preventDefault();
        if (this.selectedCityIndex >= 0) {
          this.selectCity(this.filteredCities[this.selectedCityIndex]);
        }
        break;

      case 'Escape':
        this.showCityDropdown = false;
        this.selectedCityIndex = -1;
        break;
    }
  }

  // Animations
  private initAnimations() {
    setTimeout(() => {
      const elements = document.querySelectorAll('.animate-on-load');
      elements.forEach((el, index) => {
        setTimeout(() => {
          el.classList.add('animate__animated', 'animate__fadeInUp');
        }, index * 200);
      });
    }, 100);
  }

  // Data Loading
  loadRestaurants() {
    console.log('üìä Caricamento ristoranti...');
    this.loading = true;
    this.error = null;

    this.restaurantService.getAllRestaurants().subscribe({
      next: (data) => {
        console.log('‚úÖ Ristoranti caricati:', data);
        this.restaurants = data;
        this.filteredRestaurants = [...data];
        this.loading = false;

        // Carica le foto principali per ogni ristorante
        this.loadRestaurantPhotos();

        this.cdr.detectChanges();
        console.log('üîÑ Loading terminato + Change Detection forzato');
      },
      error: (err) => {
        console.error('‚ùå Errore caricamento ristoranti:', err);
        this.error = 'Errore nel caricamento dei ristoranti. Riprova pi√π tardi.';
        this.loading = false;
        this.cdr.detectChanges();
      }
    });
  }

  // Carica foto principali per tutti i ristoranti
  private loadRestaurantPhotos() {
    console.log('üì∏ Caricamento foto ristoranti...');

    // Crea array di observable per le foto
    const photoObservables = this.restaurants.map(restaurant =>
      this.photoService.getPhotosByRestaurant(restaurant.id).pipe(
        map(photos => ({ restaurantId: restaurant.id, photos })),
        catchError(err => {
          console.warn(`‚ö†Ô∏è Errore caricamento foto per ristorante ${restaurant.id}:`, err);
          return of({ restaurantId: restaurant.id, photos: [] });
        })
      )
    );

    // Esegui tutte le chiamate in parallelo
    forkJoin(photoObservables).subscribe({
      next: (results) => {
        console.log('‚úÖ Foto caricate:', results);

        results.forEach(result => {
          if (result.photos && result.photos.length > 0) {
            // Prendi la prima foto come principale
            const mainPhoto = result.photos[0];
            this.restaurantPhotos[result.restaurantId] = this.uploadService.getImageUrl(mainPhoto.fileName);
          }
        });

        this.cdr.detectChanges();
        console.log('üì∏ Foto integrate nelle card');
      },
      error: (err) => {
        console.error('‚ùå Errore caricamento foto:', err);
      }
    });
  }

  // Metodo per ottenere l'URL della foto principale
  getRestaurantMainPhoto(restaurantId: number): string | null {
    return this.restaurantPhotos[restaurantId] || null;
  }

  // Metodo per verificare se la foto √® in caricamento
  isPhotoLoading(restaurantId: number): boolean {
    return this.photoLoadingStates[restaurantId] || false;
  }

  // Search & Filters
  searchRestaurants() {
    console.log('üîç Ricerca con filtri:', this.searchFilters);

    this.filteredRestaurants = this.restaurants.filter(restaurant => {
      const cityMatch = !this.searchFilters.city ||
                       restaurant.city?.toLowerCase().includes(this.searchFilters.city.toLowerCase());

      const cuisineMatch = !this.searchFilters.cuisine ||
                          restaurant.cuisineType?.toLowerCase().includes(this.searchFilters.cuisine.toLowerCase());

      return cityMatch && cuisineMatch;
    });

    // Scroll to results with smooth animation
    setTimeout(() => {
      const resultsElement = document.getElementById('restaurantsGrid');
      if (resultsElement) {
        resultsElement.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }
    }, 100);
  }

  filterByCuisine(cuisineName: string) {
    console.log('üçΩÔ∏è Filtro per cucina:', cuisineName);
    this.searchFilters.cuisine = cuisineName;
    this.searchRestaurants();
  }

  toggleFilter(filter: any) {
    console.log('üîß Toggle filtro:', filter.name);

    // Reset tutti i filtri
    this.quickFilters.forEach(f => f.active = false);
    filter.active = true;

    // Applica filtro
    switch(filter.name) {
      case 'Tutti':
        this.filteredRestaurants = [...this.restaurants];
        this.resetSearchFilters();
        break;

      case 'Aperti':
        this.filteredRestaurants = this.restaurants.filter(r => r.available === true);
        break;

      case 'Migliori Recensioni':
        this.filteredRestaurants = this.restaurants
          .filter(r => (r.rating || 0) >= 4.0)
          .sort((a, b) => (b.rating || 0) - (a.rating || 0));
        break;

      case 'Nuovi':
        this.filteredRestaurants = [...this.restaurants]
          .sort(() => Math.random() - 0.5)
          .slice(0, Math.min(6, this.restaurants.length));
        break;

      case 'Premium':
        this.filteredRestaurants = this.restaurants
          .filter(r => (r.rating || 0) >= 4.2)
          .sort((a, b) => (b.rating || 0) - (a.rating || 0));
        break;
    }

    // Scroll to results
    setTimeout(() => {
      const resultsElement = document.getElementById('restaurantsGrid');
      if (resultsElement) {
        resultsElement.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }
    }, 100);
  }

  private resetSearchFilters() {
    this.searchFilters = {
      city: '',
      cuisine: ''
    };
  }

  // Utility Methods
  getStars(rating: number): string {
    if (!rating || rating === 0) return '‚≠ê';

    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 >= 0.5;

    let stars = '‚≠ê'.repeat(fullStars);
    if (hasHalfStar && fullStars < 5) {
      stars += '‚≠ê';
    }

    return stars || '‚≠ê';
  }

  viewRestaurant(restaurantId: number) {
    console.log('üëÅÔ∏è Visualizza ristorante:', restaurantId);
    this.router.navigate(['/restaurant', restaurantId]);
  }

  onRestaurantCardClick(event: Event, restaurant: IRestaurant) {
    event.preventDefault();
    console.log('üéØ Card cliccata:', restaurant);
    this.viewRestaurant(restaurant.id);
  }

  // Gestione errori immagini
  onImageError(event: any, restaurantId: number) {
    console.log('‚ùå Errore caricamento immagine per ristorante:', restaurantId);
    // Rimuovi l'immagine dalla cache per mostrare il placeholder
    delete this.restaurantPhotos[restaurantId];
    this.cdr.detectChanges();
  }

  refreshRestaurants() {
    console.log('üîÑ Refresh ristoranti...');
    this.resetSearchFilters();
    this.resetFilters();
    this.loadRestaurants();
  }

  private resetFilters() {
    this.quickFilters.forEach(f => f.active = false);
    this.quickFilters[0].active = true;
  }

  onSearchFocus() {
    console.log('üîç Focus su ricerca');
  }

  onCategoryHover(category: any) {
    console.log('üëÜ Hover su categoria:', category.name);
  }

  onScroll(event: any) {
    // console.log('üìú Scroll event:', event);
  }
}
